{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserFetchService = /*#__PURE__*/(() => {\n  class UserFetchService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    userFetch(username) {\n      let userUrl = `https://api.github.com/users/${username}`;\n      let promise = new Promise((resolve, reject) => {\n        this.http.get(userUrl).toPromise().then(response => {\n          this.name = response === null || response === void 0 ? void 0 : response.name;\n          this.login = response === null || response === void 0 ? void 0 : response.login;\n          this.avatar = response === null || response === void 0 ? void 0 : response.avatar_url;\n          this.link = response === null || response === void 0 ? void 0 : response.html_url;\n          this.bio = response === null || response === void 0 ? void 0 : response.bio;\n          this.followers = response === null || response === void 0 ? void 0 : response.followers;\n          this.following = response === null || response === void 0 ? void 0 : response.following;\n          this.date = response === null || response === void 0 ? void 0 : response.created_at;\n          resolve(this.name, this.login, this.avatar, this.link, this.bio, this.followers, this.following, this.date);\n        }, error => {\n          'User Not Found';\n\n          reject(error);\n        });\n      });\n      return promise;\n    }\n\n    repoFetch(username) {\n      let repoUrl = `https://api.github.com/users/${username}/repos?per_page=15&sort='created: asc'`;\n      let promise2 = new Promise((resolve, reject) => {\n        this.http.get(repoUrl).toPromise().then(response => {\n          this.repos = response;\n          resolve(this.repos = response);\n        }, error => {\n          'Repos Not Found';\n\n          reject(error);\n        });\n      });\n      return promise2;\n    }\n\n  }\n\n  UserFetchService.ɵfac = function UserFetchService_Factory(t) {\n    return new (t || UserFetchService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserFetchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserFetchService,\n    factory: UserFetchService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserFetchService;\n})();","map":null,"metadata":{},"sourceType":"module"}